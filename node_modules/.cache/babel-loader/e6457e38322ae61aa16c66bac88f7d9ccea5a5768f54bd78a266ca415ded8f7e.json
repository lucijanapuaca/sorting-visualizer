{"ast":null,"code":"const countingSort = (arSize, divSizes, divs, div_update) => {\n  let max = Math.max(...divSizes);\n\n  // Create a count array with a size equal to (max + 1)\n  let count = new Array(max + 1).fill(0);\n\n  // Count the occurrences of each element in the input array\n  for (let i = 0; i < arSize; i++) {\n    count[divSizes[i]]++;\n  }\n  for (let i = 1; i <= max; i++) {\n    count[i] += count[i - 1];\n  }\n  for (let i = 0; i < count.length; i++) {\n    while (count[i] > 0) {\n      var temp = divSizes[i];\n      divSizes[i] = divSizes[i + 1];\n      divSizes[i + 1] = temp;\n      div_update(divs[i], divSizes[i], \"green\");\n      count[i]--;\n    }\n  }\n\n  // var n = arSize;\n  // var key = [];\n  // // var output = new Array(n);\n  // var k = 0;\n  // k = findBiggestValue(n, k, divSizes);\n  // var count = new Array(k+1).fill(0);\n\n  // for (let i = 0; i < n-1; i++) {\n  //     div_update(divs[i], divSizes[i], \"yellow\");\n  //     var j = key[divSizes[i]];\n  //     count[j] = count[j] + 1;\n  // }\n\n  // for(let i = 1; i < k; i++) {\n  //     count[i] = count[i] + count[i-1];\n  // }\n\n  // for(let i = n-1; i>0; i--) {\n  //     j = key[divSizes[i]];\n  //     count[j] = count[j] - 1;\n\n  //     // output[count[j]] = divSizes[i]; // treba ubacit div_update i zamijenit ovaj output nekako\n  // }\n};\n\nexport default countingSort;","map":{"version":3,"names":["countingSort","arSize","divSizes","divs","div_update","max","Math","count","Array","fill","i","length","temp"],"sources":["C:/Users/Acer/Desktop/zavrsni/src/sorts/counting.js"],"sourcesContent":["const countingSort = (arSize, divSizes, divs, div_update) => {\r\n\r\n    let max = Math.max(...divSizes);\r\n\r\n  // Create a count array with a size equal to (max + 1)\r\n  let count = new Array(max + 1).fill(0);\r\n\r\n  // Count the occurrences of each element in the input array\r\n  for (let i = 0; i < arSize; i++) {\r\n    count[divSizes[i]]++;\r\n  }\r\n\r\n  for (let i = 1; i <= max; i++) {\r\n    count[i] += count[i-1];\r\n  }\r\n\r\n   for (let i = 0; i < count.length; i++) {\r\n    while (count[i] > 0) {\r\n        var temp = divSizes[i];\r\n        divSizes[i] = divSizes[i + 1];\r\n        divSizes[i + 1] = temp;\r\n\r\n      div_update(divs[i], divSizes[i], \"green\");\r\n\r\n      count[i]--;\r\n    }\r\n  }\r\n\r\n\r\n    // var n = arSize;\r\n    // var key = [];\r\n    // // var output = new Array(n);\r\n    // var k = 0;\r\n    // k = findBiggestValue(n, k, divSizes);\r\n    // var count = new Array(k+1).fill(0);\r\n\r\n    // for (let i = 0; i < n-1; i++) {\r\n    //     div_update(divs[i], divSizes[i], \"yellow\");\r\n    //     var j = key[divSizes[i]];\r\n    //     count[j] = count[j] + 1;\r\n    // }\r\n\r\n    // for(let i = 1; i < k; i++) {\r\n    //     count[i] = count[i] + count[i-1];\r\n    // }\r\n\r\n    // for(let i = n-1; i>0; i--) {\r\n    //     j = key[divSizes[i]];\r\n    //     count[j] = count[j] - 1;\r\n\r\n    //     // output[count[j]] = divSizes[i]; // treba ubacit div_update i zamijenit ovaj output nekako\r\n    // }\r\n\r\n    \r\n};\r\n  \r\nexport default countingSort;"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,KAAK;EAEzD,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,GAAGH,QAAQ,CAAC;;EAEjC;EACA,IAAIK,KAAK,GAAG,IAAIC,KAAK,CAACH,GAAG,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC;;EAEtC;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,MAAM,EAAES,CAAC,EAAE,EAAE;IAC/BH,KAAK,CAACL,QAAQ,CAACQ,CAAC,CAAC,CAAC,EAAE;EACtB;EAEA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,EAAEK,CAAC,EAAE,EAAE;IAC7BH,KAAK,CAACG,CAAC,CAAC,IAAIH,KAAK,CAACG,CAAC,GAAC,CAAC,CAAC;EACxB;EAEC,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,OAAOH,KAAK,CAACG,CAAC,CAAC,GAAG,CAAC,EAAE;MACjB,IAAIE,IAAI,GAAGV,QAAQ,CAACQ,CAAC,CAAC;MACtBR,QAAQ,CAACQ,CAAC,CAAC,GAAGR,QAAQ,CAACQ,CAAC,GAAG,CAAC,CAAC;MAC7BR,QAAQ,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGE,IAAI;MAExBR,UAAU,CAACD,IAAI,CAACO,CAAC,CAAC,EAAER,QAAQ,CAACQ,CAAC,CAAC,EAAE,OAAO,CAAC;MAEzCH,KAAK,CAACG,CAAC,CAAC,EAAE;IACZ;EACF;;EAGE;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;AAGJ,CAAC;;AAED,eAAeV,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}