{"ast":null,"code":"const countingSort = (arSize, divSizes, divs, div_update) => {\n  var n = arSize;\n  var key = 0;\n  var output = new Array(n);\n  var k = 0;\n  k = findBiggestValue(n, k, divSizes);\n  var count = new Array(k + 1).fill(0);\n  for (var i = 0; i < n - 1; i++) {\n    var j = key(divSizes[i]);\n    count[j] = count[j] + 1;\n  }\n  for (var i = 1; i < k; i++) {\n    count[i] = count[i] + count[i - 1];\n  }\n  for (var i = n - 1; i > 0; i--) {\n    j = key[divSizes[i]];\n    count[j] = count[j] - 1;\n    output[count[j]] = divSizes[i]; // treba ubacit div_update i zamijenit ovaj output nekako\n  }\n};\n\nconst findBiggestValue = (n, k, divSizes) => {\n  for (var i = 0; i < n - 1; i++) {\n    if (divSizes[i] > k) {\n      k = divSizes[i];\n    }\n  }\n  return k;\n};\nexport default countingSort;","map":{"version":3,"names":["countingSort","arSize","divSizes","divs","div_update","n","key","output","Array","k","findBiggestValue","count","fill","i","j"],"sources":["C:/Users/Acer/Desktop/zavrsni/src/sorts/counting.js"],"sourcesContent":["const countingSort = (arSize, divSizes, divs, div_update) => {\r\n\r\n    var n = arSize;\r\n    var key = 0;\r\n    var output = new Array(n);\r\n    var k = 0;\r\n    k = findBiggestValue(n, k, divSizes);\r\n    var count = new Array(k+1).fill(0);\r\n\r\n    for (var i = 0; i < n-1; i++) {\r\n        var j = key(divSizes[i]);\r\n        count[j] = count[j] + 1;\r\n    }\r\n\r\n    for(var i = 1; i < k; i++) {\r\n        count[i] = count[i] + count[i-1];\r\n    }\r\n\r\n    for(var i = n-1; i>0; i--) {\r\n        j = key[divSizes[i]];\r\n        count[j] = count[j] - 1;\r\n        output[count[j]] = divSizes[i]; // treba ubacit div_update i zamijenit ovaj output nekako\r\n    }\r\n\r\n    \r\n};\r\n\r\nconst findBiggestValue = (n, k, divSizes) => {\r\n\r\n    for(var i = 0; i < n-1; i++) {\r\n        if(divSizes[i] > k) {\r\n            k = divSizes[i];\r\n        }\r\n    }\r\n\r\n    return k;\r\n};\r\n  \r\nexport default countingSort;"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,KAAK;EAEzD,IAAIC,CAAC,GAAGJ,MAAM;EACd,IAAIK,GAAG,GAAG,CAAC;EACX,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAACH,CAAC,CAAC;EACzB,IAAII,CAAC,GAAG,CAAC;EACTA,CAAC,GAAGC,gBAAgB,CAACL,CAAC,EAAEI,CAAC,EAAEP,QAAQ,CAAC;EACpC,IAAIS,KAAK,GAAG,IAAIH,KAAK,CAACC,CAAC,GAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC;EAElC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,CAAC,GAAC,CAAC,EAAEQ,CAAC,EAAE,EAAE;IAC1B,IAAIC,CAAC,GAAGR,GAAG,CAACJ,QAAQ,CAACW,CAAC,CAAC,CAAC;IACxBF,KAAK,CAACG,CAAC,CAAC,GAAGH,KAAK,CAACG,CAAC,CAAC,GAAG,CAAC;EAC3B;EAEA,KAAI,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAEI,CAAC,EAAE,EAAE;IACvBF,KAAK,CAACE,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,GAAC,CAAC,CAAC;EACpC;EAEA,KAAI,IAAIA,CAAC,GAAGR,CAAC,GAAC,CAAC,EAAEQ,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;IACvBC,CAAC,GAAGR,GAAG,CAACJ,QAAQ,CAACW,CAAC,CAAC,CAAC;IACpBF,KAAK,CAACG,CAAC,CAAC,GAAGH,KAAK,CAACG,CAAC,CAAC,GAAG,CAAC;IACvBP,MAAM,CAACI,KAAK,CAACG,CAAC,CAAC,CAAC,GAAGZ,QAAQ,CAACW,CAAC,CAAC,CAAC,CAAC;EACpC;AAGJ,CAAC;;AAED,MAAMH,gBAAgB,GAAGA,CAACL,CAAC,EAAEI,CAAC,EAAEP,QAAQ,KAAK;EAEzC,KAAI,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,CAAC,GAAC,CAAC,EAAEQ,CAAC,EAAE,EAAE;IACzB,IAAGX,QAAQ,CAACW,CAAC,CAAC,GAAGJ,CAAC,EAAE;MAChBA,CAAC,GAAGP,QAAQ,CAACW,CAAC,CAAC;IACnB;EACJ;EAEA,OAAOJ,CAAC;AACZ,CAAC;AAED,eAAeT,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}